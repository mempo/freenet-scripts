#!/bin/bash

# This script uses Wine to build the Windows installer executables under a
# restricted user account. A temporary directory contains both a clone of
# the installer repos and the Wine prefix used to build. It is removed after
# the build to make it difficult for state to persist between builds.
#
# Commands are executed as the Wine user via SSH, so passwordless SSH login with
# authorized_keys may be helpful. Wine GUI elements are surpressed with xvfb.
#
# After the build the executables are signed, and then there is a confirmation
# prompt for release.
#
# The following files should be in the RELEASE_DIRECTORY:
#
# * dependencies/bcprov-jdk15on-149.jar -   http://www.bouncycastle.org/download/bcprov-jdk15on-149.jar
# * dependencies/wrapper.jar		-   The version of the Java Service Wrapper jar we are currently using, must correspond to the native binaries
# * dependencies/Ahk2Exe.exe
# * dependencies/AutoHotkeySC.bin
# * freenet.jar                         -   Whatever's pointed at by https://downloads.freenetproject.org/alpha/freenet-stable-latest.jar.url
# * JSTUN.jar                           -   https://downloads.freenetproject.org/alpha/plugins/JSTUN/JSTUN-v3.jar
# * KeyUtils.jar                        -   https://downloads.freenetproject.org/alpha/plugins/KeyUtils/KeyUtils-v5018.jar
# * Library.jar                         -   https://downloads.freenetproject.org/alpha/plugins/Library/Library-v26.jar
# * seednodes.fref                      -   https://downloads.freenetproject.org/alpha/opennet/seednodes.fref
# * ThawIndexBrowser.jar                -   https://downloads.freenetproject.org/alpha/plugins/ThawIndexBrowser/ThawIndexBrowser-v5.jar
# * UPnP.jar                            -   https://downloads.freenetproject.org/alpha/plugins/UPnP/UPnP-r26690.jar
#
# Though URLs are provided for convenience, building them or acquiring them over
# Freenet is of course also possible.
#
# Requirements:
#   Build:
#       sha1sum
#       localhost SSH server on port 22
#       xvfb
#       wine 1.4
#   Sign:
#       gpg
#   Release:
#       rsync

# Shared default configuration and utility functions.
source freenet-scripts-common || exit

# Whether to exit before releasing.
dryRun="false"
# Value of WINEDEBUG to run Wine with.
wineDebug=""
# Wininstaller branch to checkout.
branch="master"
# Whether to use Xnest rather than Xvfb. Useful for debugging.
xnest="false"

if [[ $(id -u) -eq 0 && -z "$RUN_AS_USER" ]]
then
    echo "Do not run this script as root."
    exit 1
fi

while :
do
    case $1 in
        --help | - | -\?)
            cat <<EOF
Builds and releases the Windows installers.
Prompts for confirmation before releasing.
Configuration file is at $configPath by default.

--config CONFIG   Path to freenetrc
--dry-run         Do not release. Build and sign the installer, then exit.
--wine-debug      Run Wine with the given WINEDEBUG environment variable value.
                  See http://wiki.winehq.org/DebugChannels
--xnest		  Run Wine in an Xnest window (so you can see the graphical output).
		  Useful for debugging your wine setup.

EOF
            exit 0
            ;;
        --config)
            configPath="$2"
            shift 2
            ;;
        --dry-run)
            dryRun="true"
            shift
            ;;
	--xnest)
	    xnest="true"
	    shift
	    ;;
        --wine-debug)
            wineDebug="$2"
            shift 2
            ;;
	--branch)
	    branch="$2"
	    shift 2
	    ;;
        --) # End of all options
            shift
            break
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *)  # No more options; stop parsing.
            break
            ;;
    esac
done

readConfig

# Make temporary build directory to hold installer source, dependencies,
# and Wine prefix. This will be wiped on exit.
# TODO: Common function.
buildDir=$(mktemp -d) || exit

function rmTemp {
    popd
    echo "Removing temporary build directory."
    rm -rf "$buildDir"
    echo "Done."
}

trap rmTemp EXIT

# The Wine user will need access too, and non-root users cannot chown.
# This assumes the Wine user is in a group of the same name along with
# the current user.
#
# If this is not the case, either the Wine user cannot access the build
# directory or the current user cannot chown to a group it is not in.
if [[ -z "$(groups $USER | grep -F "$wineUser")" ]]; then
    cat <<EOF
The current user $USER is not a member of the group $wineUser and will not be
able to chgrp the build directory to give $wineUser access. You may have to
execute a new login shell (su $USER) to have the group change take full effect.
EOF
    exit 1
fi

git clone "$wininstallerDir" "$buildDir"
pushd "$buildDir" || exit
git checkout "$branch"
getBuildInfo
if [[ -z "$gitVersion" ]]; then echo Could not get git version; exit 1; fi

# Copy files

cp "$releaseDir/freenet.jar"                         "res/install_node/"                || exit
cp "$freenetExtPath"                                 "res/install_node/freenet-ext.jar" || exit
cp "$releaseDir/dependencies/bcprov-jdk15on-149.jar" "res/install_node/"                || exit
cp "$releaseDir/dependencies/wrapper.jar"            "res/install_node/wrapper/"        || exit
cp "$releaseDir/seednodes.fref"                      "res/install_node/"                || exit
# TODO: Is this an appropriate place to have a bundled plugin list? 
for x in JSTUN KeyUtils ThawIndexBrowser UPnP Library; do
  cp "$releaseDir/${x}.jar"                          "res/install_node/plugins/"        || exit
done
cp "$releaseDir/dependencies/Ahk2Exe.exe"            "res/tool_ahk/"                    || exit
cp "$releaseDir/dependencies/AutoHotkeySC.bin"       "res/tool_ahk/"                    || exit
echo Copied dependencies.

# Update the installer's listing of Fred version with the current version.
echo Fred build is \#$buildNumber. Updating build.
sed -i "s/_Inc_FreenetBuild = \#[0-9]\\+/_Inc_FreenetBuild = \#$buildNumber/" src/freenetinstaller/FreenetInstaller_Include_Info.inc

echo "Setting permissions."
chmod -R 770 . || exit
chgrp -R "$wineUser" . || exit

echo Running the build

# The Wine user must create the prefix directory. If the directory is missing
# Wine will refuse to create it if the directory that would contain it is not
# owned by the user.
xvfbrun="xvfb-run"
ssh="ssh -n "
if [ "$xnest" == "true" ]; then
	xvfbrun=""
	Xnest :10 -ac &
	OLDDISPLAY="$DISPLAY"
	DISPLAY=:10.0
	export DISPLAY
	ssh="$ssh -X"
fi
$ssh -n $wineUser@localhost "cd $buildDir; mkdir .wine; WINEDEBUG=$wineDebug WINEPREFIX=$buildDir/.wine $xvfbrun wine cmd /c build.cmd; killall -s9 -u $wineUser"

if [ "$xnest" == "true" ]; then
	killall Xnest
	DISPLAY="$OLDDISPLAY"
fi
cp bin/FreenetInstaller.exe FreenetInstaller-$buildNumber.exe || exit
pushd res/install_node/updater/ || exit
cp update.cmd update-new.cmd || exit
sha1sum update-new.cmd > update-new.cmd.sha1 || exit
sha1sum update.cmd > update.cmd.sha1 || exit
popd

signingCommand="cd $buildDir; gpg --sign --detach-sign FreenetInstaller-$buildNumber.exe"
if [[ -z "$signingUser" ]]
then
    echo Signing
    eval "$signingCommand" || exit
else
    echo Signing as $signingUser
    su - $signingUser -c "$signingCommand" || exit
fi

echo "Fred git version is $gitVersion"
echo "Fred commit ID is $commitID"
cp FreenetInstaller-$buildNumber.exe* $releaseDir
if [[ "$dryRun" = "true" ]]; then
    echo "Dry run - exiting without performing release."
    exit 0
fi

echo -n "Perform release [y/N]?"
read response
if [[ $(echo "$response" | tr '[:upper:]' '[:lower:]') != "y" ]]; then
    echo "Aborting release."
    exit 0
fi

echo Uploading update scripts
rsync res/install_node/updater/update*cmd* "$targetHost:/var/www/downloads/alpha/update/"

echo Uploading wrapper.conf
cp res/install_node/wrapper/wrapper.conf wrapper.conf.windows || exit 7
sha1sum wrapper.conf.windows > wrapper.conf.windows.sha1 || exit 7
rsync wrapper.conf* $targetHost:/var/www/downloads/alpha/update/ || exit 7

echo Uploading to webserver
rsync -v FreenetInstaller-$buildNumber.exe* "$targetHost:/var/www/downloads/alpha/installer/"
ssh $targetHost -- "sed -i \"s/FreenetInstaller.exe .*$/FreenetInstaller.exe installer\/FreenetInstaller-$buildNumber.exe/\" /var/www/downloads/alpha/.registry"

# We need access both to delete it on a clean exit and to copy wrapper files.
$ssh -n $wineUser@localhost "chmod -R 770 $buildDir"

pushd bin

cp "$buildDir/res/install_node/wrapper/freenetwrapper.exe" "wrapper-windows-x86-32.exe" || exit

cp "$buildDir/res/install_node/wrapper/wrapper-windows-x86-32.dll" . || exit

mv freenetlauncher.exe freenetlauncher-new.exe

for name in wrapper-windows-x86-32.exe wrapper-windows-x86-32.dll freenetlauncher-new.exe; do

    echo Uploading $name version $gitVersion

    mv $name $name.$gitVersion
    sha1sum $name.$gitVersion > $name.$gitVersion.sha1
    rsync -v $name.$gitVersion* $targetHost:/var/www/downloads/alpha/installer/

    ssh $targetHost -- "sed -i \"s/$name .*$/$name installer\/$name.$gitVersion/\" /var/www/downloads/alpha/.registry"

done

popd

